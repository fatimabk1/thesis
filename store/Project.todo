- Category @done 
- Price ENUM @done 
- Product  
    - setup() @done
    - order(self, n) @done 
    - generate_exp() @done
    - get_sublot_quantity() @done
    - set_sale() @done
    - set_holiday() @done 
    - set_regular() @done 
    - get_price() @done 
    - get_popularity() @done
    - get_popularity_delta() @done 
- Inventory
    - decrement_n(self, n) @done
    - available_shelf_space(grp_id) OUTSIDE @done
    - available_back_space(grp_id) OUTSIDE @done
    - select(grp_id) OUTSIDE @done
    - toss(grp_id, n) OUTSIDE @done
    - restock(grp_id, n) OUTSIDE @done
    - unload(grp_id) OUTSIDE @done
    - create_pending(grp_id, sublots) OUTSIDE @done
    - order_inventory() OUTSIDE @done
    - toss_list() OUTSIDE @done
    - restock_list() OUTSIDE @done 
    - unload_list() OUTSIDE @done
- Cart
    - get_size(sid) @done
    - get_total(sid) @done
    - scan_n(sid, n) @done
    - add_item(sid, grp_id) @done
    - print_cart(sid) @done
- Shopper
    - inside @done
        - random_start_min() @done
        - random_quota() @done
        - __repr__() @done
        - get_status() @done 
        - set_status() @done
        - reset_browse() @done
        - select_grp() @done
    - floating @done
        - step(sid, CLOCK, session) @done
        - create(n, session) @done
- Emp
    - inside
        - do_task()  @done
        - set_task(grp_id)  @done
        - get_task() @done
        - set_role(role)  @done
        - get_role() @done
        - get_checkout_speed() @done
        - get_stock_speed() @done
        - get_schedule(day)  @done
        - calculate_wage() @done
    - floating
        - get_employee(lid)  @done
        - return_employee(eid) @done
        - swap_employee(eid, lid) @done
        - make_schedule() @done
        - set_schedule(day, session) @done
        - prepare_employees(session)  @done 
- Lane
    - inside
        - enq(sid) @done
            - enq() test @done
        - deq() --> sid @done
            - deq() test @done
        - set_emp(eid) @done
            - set_emp test @done
        - close() @done
            - close() test
        - open() @done 
            - open() test @done
        - step() @done
            - step() test @done
    - floating
        - manage() @done
            - manage() test
        - shortest() @done
            - shortest() tested via enq @done
        - collapse() @done
            - collapse() test
        - expand() @done
            - expand() test
        - total_shoppers() @done
            - total_shoppers() test @done
        - avg_qlen() @done
            - avg_qlen() test @done
        - avg_last_qtime() aka avg_alt @done
            - avg_last_qtime() test @done
        - queue_shopper() @done
            - queue_shopper() test @done
        - shift_change()  @done
            - shift_change()  test
- Simulator
    - day
        - pre-day
            - employees only
        - step all
        - employee shift change
        - post-day
            - employees only
    - month
        - pay labor
        - order inventory
- Report




# PSUEDOCODE FOR TASK WORK PROCESS

# ------------------------------------------------ main
# pull lists
restockme = Inventory.restock_list()
tossme = Inventory.toss_list()
unload = Inventory.unload_list()

todo = [restockme, tossme, unload]

employees = session.query(ModelEmployee).all()
if employees:
    emp = employees[0]
    for lst in todo:
        for task in lst:
            emp_q = emp.q
            while task.quantity < emp_q:
                emp.assign(task)
            updated_tasks = emp.do_tasks()
            # some work updating the tasks & list


# ------------------------------------------------ pulling lists
def restock_list():
    for prod in products:
        curr_shelf, curr_back = DB query
        if curr_shelf < restock_threshold:  # curr_shelf requires DB query
            q = min(curr_back, max_shelf - curr_shelf)  # curr_back requires DB query

def unload_list():
    for prod in products:
        if available == today AND curr_pending > 0: # curr_pending requires DB query,  overall requires DB query
            q = curr_pending / lot_quanity 

def toss_list():
    if exp == today:  # db_query
        q = curr_pending + curr_shelf + curr_back   # one DB query for all values


# ------------------------------------------------ doing tasks
def do_tasks(emp):
    for task in emp.tasks:
        q = execute_task(task.grp, task.q)
        task.q = q
    return emp.tasks


def execute_task(grp, q):
    inv_list = session.query(ModelInventory).filter(grp == grp).all()
    for inv in inv_list:
        # update inv
    # return remaining q left on task 
